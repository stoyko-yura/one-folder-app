// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id String @id @default(uuid())

  login String @unique
  email String @unique
  hash  String @map("passwordHash")

  role Role @default(USER)

  profile Profile?

  folders  Folder[]
  comments Comment[]

  createdAt DateTime @default(now())

  @@map("users")
}

model Profile {
  id       String  @id @default(uuid())
  bio      String? @db.VarChar(200)
  username String? @db.VarChar(24)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("profiles")
}

// Folder model
model Folder {
  id String @id @default(uuid())

  title       String  @db.VarChar(24)
  description String? @db.VarChar(200)
  image       String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  software Software[]
  ratings  Rating[]
  comments Comment[]

  access FolderAccess @default(PUBLIC)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("folders")
}

// Software model
model Software {
  id String @id @default(uuid())

  name        String
  url         String
  icon        String?
  description String? @db.VarChar(100)

  folders            Folder[]
  softwareCategories SoftwareCategory[]
  ratings            Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("software")
}

// Software category model
model SoftwareCategory {
  id   String @id @default(uuid())
  name String @unique

  software Software[]

  @@map("softwareCategories")
}

// Comment model
model Comment {
  id String @id @default(uuid())

  message String? @db.VarChar(200)

  ratings Rating[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  folder   Folder @relation(fields: [folderId], references: [id])
  folderId String

  createdAt DateTime @default(now())

  @@map("comments")
}

// Rating model
model Rating {
  id String @id @default(uuid())

  rating Int @db.SmallInt

  software   Software? @relation(fields: [softwareId], references: [id])
  softwareId String?
  folder     Folder?   @relation(fields: [folderId], references: [id])
  folderId   String?
  comment    Comment?  @relation(fields: [commentId], references: [id])
  commentId  String?

  createdAt DateTime @default(now())

  @@map("ratings")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum FolderAccess {
  PUBLIC
  PRIVATE
}
